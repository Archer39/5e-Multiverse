{"name":"HexSupport","type":"script","scope":"global","author":"T4cu5jv0VXcrhb1w","img":"icons/weapons/swords/greatsword-evil-green.webp","command":"async function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\nconst target = canvas.tokens.get(lastArg.tokenId);\nconst itemD = lastArg.efData.flags.dae.itemData;\nconst tokenD = canvas.tokens.get(lastArg.efData.flags.dae.tokenId);\n\nif (args[0] === \"on\") {\n    let itemName = `${getProperty(((tactor.flags) || (tactor.data?.flags)), \"midi-qol.hexEffect\")} Life Monitor`;\n    console.warn(`=>`, itemName, \"Applied on\", tactor.name);\n    let primaryEffect = await tactor.effects.find(i => i.id === lastArg.effectId);\n    let effect = await tactor.effects.find(i => ((i.label === itemName) || (i.data?.label === itemName)));\n    let effectData = [{\n        origin: \"\",\n        changes: [\n            { key: \"macro.execute\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"HexSupport\", priority: 20 },\n            { key: \"flags.midi-qol.hexEffect\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: getProperty(((tactor.data?.flags) || (tactor?.flags)), \"midi-qol.hexEffect\"), priority: 20 },\n            { key: `flags.dae.deleteUuid`, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: primaryEffect.uuid, priority: 20 }\n        ],\n        flags: { dae: { tokenId: tokenD.id, itemData: itemD, specialDuration: [\"zeroHP\"] } },\n        disabled: false,\n        transfer: false,\n        icon: itemD.img,\n        label: itemName\n    }];\n    if (!effect) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tactor.uuid, effects: effectData });\n    let casterEffect = tokenD.actor.effects.find(i => ((i.label === `Hexblade Bonus Damage`) || (i.data?.label === `Hexblade Bonus Damage`)));\n    if (casterEffect) {\n        console.warn(`=>`, \"Updating Concentrating\", tokenD.actor.name);\n        let lastEffect = tactor.effects.find(i => ((i.label === itemName) || (i.data?.label === itemName)));\n        let checkEffect = getProperty(((tokenD.actor.flags) || (tokenD.actor.data?.flags)), \"dae.deleteUuid\");\n        let effectChanges = duplicate(((casterEffect.changes) || (casterEffect.data?.changes)));\n        effectChanges.push({ key: `flags.dae.deleteUuid`, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: lastEffect.uuid, priority: 20 });\n        let effectData = [{\n            _id: casterEffect.id,\n            changes: effectChanges\n        }]\n        if (checkEffect != lastEffect.uuid) await MidiQOL.socket().executeAsGM(\"updateEffects\", { actorUuid: tokenD.actor.uuid, updates: effectData });\n    }\n}\n\nif ((lastArg[\"expiry-reason\"] === \"midi-qol:zeroHP\") && (getProperty(((tactor.flags) || (tactor.data?.flags)), \"midi-qol.hexEffect\") === \"Hexblade\")) {\n    console.log(`=>`, `Hexblade Zero HP`);\n    let healType = \"healing\";\n    let damageRoll = await new Roll(`@classes.warlock.levels[${healType}] + max(1, @abilities.cha.mod)`, tokenD.actor.getRollData()).evaluate({ async: true });\n    await new MidiQOL.DamageOnlyWorkflow(tactor, target, damageRoll.total, healType, [tokenD], damageRoll, { flavor: `((Hexblade's Curse) ${CONFIG.DND5E.healingTypes[healType]})`, itemData: itemD, itemCardId: \"new\" });\n    await wait(200);\n    let effect = tactor.effects.find(i => ((i.label === \"Hexblade Life Tap\") || (i.data?.label === \"Hexblade Life Tap\")));\n    if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tactor.uuid, effects: [effect.id] });\n}\n\nif ((lastArg[\"expiry-reason\"] === \"midi-qol:zeroHP\") && (getProperty(((tactor.flags) || (tactor.data.flags)), \"midi-qol.hexEffect\") === \"Hexcurse\")) {\n    console.log(`=>`, `Hex Zero HP`);\n    await wait(200);\n    let effect = tactor.effects.find(i => ((i.label === \"Hex Curse\") || (i.data?.label === \"Hex Curse\")));\n    if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tactor.uuid, effects: [effect.id] });\n}\n\nif (args[0] === \"off\") {\n    let itemName = `${getProperty(((tactor.flags) || (tactor.data?.flags)), \"midi-qol.hexEffect\")} Life Monitor`;\n    let effect = tactor.effects.find(i => ((i?.label === itemName) || (i?.data?.label === itemName)));\n    if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tactor.uuid, effects: [effect.id] });\n}","ownership":{"default":0,"T4cu5jv0VXcrhb1w":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true},"core":{"sourceId":"Macro.55FvysI7vkHxg3me"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.290","createdTime":1663972606853,"modifiedTime":1669441822766,"lastModifiedBy":"T4cu5jv0VXcrhb1w"},"folder":null,"sort":0,"_id":"uaZgBOiKWTofRznk"}
